---
#title: "Vowelentines day"
format:
  html:
    title: "Vowelentines day"
    theme: flatly
    page-layout: full
    include-in-header: gfonts.html
    mainfont: "Atkinson Hyperlegible"
title-block-banner: true    
server: shiny
---

```{r}
#| include: false

library(plotly)

```

::: panel-tabset
### Setup

```{r}
#includeHTML("gfonts.html")
```

::: {#setup-toggle}
::: {layout-nrow="1"}
```{r}
h3("Tell us about yourself!")

textInput(
  "name",
  "What's your name?",
  value = "Speaker",
)

selectInput("height", "Are you on the taller side or shorter side?", 
            choices = list("Shorter" = 1, 
                           "Taller" = 2))
textOutput("speakerfile")

selectInput("passage", 
            h4("What was your reading passage?"), 
            choices = list("Rainbow Passage" = 1, 
                           "Arthur the Rat" = 2,
                           "Comma Gets a Cure" = 3,
                           "this is a test" = 4), 
            selected  = 1)

```

```{r}
h3("Prepare the Alignment!")

fileInput("wav_upload", "Choose wav File",
          multiple = FALSE,
          accept = c(".wav"))

textOutput("duration")
br()
actionButton("align", "Align!")

textOutput("align_status")
```

```{r}
h3("Run the extraction!")
actionButton("extract", "Extract!")
textOutput("extract_status")
```
:::
:::

### Results

```{r}
actionButton("report", "Generate Report!")
```

#### Here's your whole vowel plot

```{r}
plotlyOutput("vowel_plot", height = "600px", width = "700px")
#plotlyOutput("vowel_plot", width = "700px", height = "700px")
```

::: {layout-nrows="1"}
<div>

Your pin\~pen merger or distinction

```{r}
plotlyOutput("pinpen")
```

</div>
:::

::: {layout-nrow="1"}
<div>

Your /Ã¦/ system!

```{r}
plotlyOutput("shorta")
```

</div>

<div>

Your Low-Back vowels

```{r}
plotlyOutput("lowback")
```

</div>
:::

::: {layout-ncol="2"}
<div>

Your /ay/s

```{r}
plotlyOutput("ayplot")
```

</div>

<div>

Your /aw/s

```{r}
plotlyOutput("awplot")
```

</div>
:::
:::

```{r}
#| context: server
#| label: setup
#| echo: false
#| include: false
options(shiny.maxRequestSize = 20 * 1024^2)
library(reticulate)
library(ggplot2)
library(dplyr)
library(stringr)
library(plotly)
library(showtext)
library(mgcv)
library(tidyr)
library(purrr)

font_add_google("Fira Sans", family = "Fira Sans")
showtext_auto()

## setup: read all passages
all_passage_path <- fs::dir_ls("passages")

## data directory definition and management
data_dir <- fs::path_join("data")
to_align_dir <- fs::path_join(c(data_dir, "to_align"))
post_align_dir <- fs::path_join(c(data_dir, "post_align_dir"))

to_extract_dir <- fs::path_join(c(data_dir, "to_extract"))
post_extract_dir <- fs::path_join(c(data_dir, "post_extract_dir"))


file_prefix <- "speaker"

if(!fs::dir_exists(data_dir)){
  fs::dir_create(data_dir)
}

if(!fs::dir_exists(to_align_dir)){
  fs::dir_create(to_align_dir)
}

if(!fs::dir_exists(post_align_dir)){
  fs::dir_create(post_align_dir)
}

if(!fs::dir_exists(to_extract_dir)){
  fs::dir_create(to_extract_dir)
}

if(!fs::dir_exists(post_extract_dir)){
  fs::dir_create(post_extract_dir)
}

```

```{r}
#| context: server
#| label: align-tgsetup

makeTG <- reactive({
   id <- showNotification("Processing wav file...", duration = NULL, closeButton = FALSE)
   on.exit(removeNotification(id), add = TRUE)
   
   ### Process input block
   audio <- tuneR::readWave(input$wav_upload$datapath)
   textpath <- all_passage_path[as.numeric(input$passage)]
   outpath <- fs::path_join(
        c(to_align_dir, glue::glue("{file_prefix}.TextGrid"))
        )   
   duration <- round(length(audio@left) / audio@samp.rate, digits = 2)
   system(
     glue::glue("python make_tg.py {input$name} {textpath} {duration} {outpath}")
     )
   
   ## This broke, idk why
   # praatio <- import("praatio")
   # tg <- praatio$textgrid$Textgrid()
   # interval <- praatio$textgrid$IntervalTier(
   #   name = input$name, 
   #   entries = list(c('0', as.character(duration), text)), 
   #   minT = 0,
   #   maxT = duration
   #   )
   # 
   # tg$addTier(interval)
   # 
   # tg$save(
   #   fs::path_join(
   #     c(to_align_dir, glue::glue("{file_prefix}.TextGrid"))
   #     ), 
   #   format = "long_textgrid", 
   #   includeBlankSpaces = F
   #  )
   return(glue::glue("{duration} s long"))
 })

output$duration <- renderText({
  req(input$wav_upload)
  return(makeTG())
})
 

```

```{r}
#| context: server
#| label: align-align

align <- eventReactive(input$align,{
    req(input$wav_upload)
    id <- showNotification("Running Montreal Forced Aligner...", duration = NULL, closeButton = FALSE)
    on.exit(removeNotification(id), add = TRUE)
    
    wav_path <- fs::path_join(
      c(to_align_dir, 
        glue::glue("{file_prefix}.wav"))
      )
    
    if(fs::link_exists(wav_path)){
      fs::link_delete(wav_path)
    }
    
    fs::link_create(
      input$wav_upload$datapath, 
      wav_path
      )
    system(glue::glue("mfa align --clean {to_align_dir} english_us_arpa english_us_arpa {post_align_dir}"))
    return("aligned!")
  }
)



output$align_status <- renderText({
  return(align())
})

```

```{r}
#| context: server
#| label: align-plot
makeAlignPlot <- reactive({
    tg_df <- readtextgrid::read_textgrid(
    fs::path_join(
      c(post_align_dir, "speaker.TextGrid")
    )
  )
  
  tg_df |> 
    filter(tier_name == "phones") |> 
    mutate(vowel = str_detect(text, "[AEIOU]"),
           text = str_remove(text, r"(\d)")) |> 
    ggplot(aes(xmin, text,color = vowel))+
      geom_point() + 
      theme_minimal() -> p
  return(p)
})

output$align_plot <- renderPlot({
  req(fs::file_exists(
    fs::path_join(
      c(post_align_dir, "speaker.TextGrid")
    )
  ))

  return(makeAlignPlot())
})

```

```{r}
#| context: server
#| label: extract-spkr

create_speakerfile <- reactive({
  
  sp_size <- c("f", "m")[as.numeric(input$height)]
  
  sp_info <- c(
    "--name",
    #"speaker",
    input$name,
    "--sex",
    sp_size,
    "--speakernum",
    "1"
    #"m"
  )
  
  speaker_file <- fs::path_join(
      c(
        to_extract_dir,
        glue::glue("{file_prefix}.spkr")
      )
    )
  
  if(fs::file_exists(speaker_file)){
    fs::file_delete(speaker_file)
  }
  
  fs::file_create(
    fs::path_join(
      c(
        to_extract_dir,
        glue::glue("{file_prefix}.spkr")
      )
    )
  )
  writeLines(
    sp_info,
    con = fs::path_join(
      c(
        to_extract_dir,
        glue::glue("{file_prefix}.spkr")
      )
    )
  )
})

output$speakerfile <- renderText({
  create_speakerfile()
  return("Speakerfile Created!")
})

```

```{r}
#| context: server
#| label: extract-extract


extract <- eventReactive(input$extract, {
  
  id <- showNotification("Running FAVE-Extract...", duration = NULL, closeButton = FALSE)
  on.exit(removeNotification(id), add = TRUE)

  to_extract_tg <- fs::path_join(
    c(post_align_dir,
    glue::glue("{file_prefix}.TextGrid"))
  )

  to_extract_wav <- fs::path_join(
    c(to_align_dir,
    glue::glue("{file_prefix}.wav"))
  )
  
  to_extract_spkr <- fs::path_join(
    c(to_extract_dir,
    glue::glue("{file_prefix}.spkr"))
  )

  post_extract_stem <- fs::path_join(
    c(post_extract_dir, file_prefix)
  )
  

  system(
    stringr::str_c(
      c(
        "fave-extract",
        "--mfa",
        "--outputFormat txt",
        "--formantPredictionMethod mahalanobis",
        "--measurementPointMethod faav",
        "--nSmoothing 12",
        "--remeasure",
        "--tracks",
        "--vowelSystem NorthAmerican",
        glue::glue("--speaker {to_extract_spkr}"),
        to_extract_wav,
        to_extract_tg,
        post_extract_stem
      ),
      collapse = " "
    )
  )
  
  return("extracted")
})

output$extract_status <- renderText({
  extract()
})
```

```{r}
#| context: server
#| label: results-dataprep

get_data <- reactive({
  df <- readr::read_tsv(fs::path_join(
      c(post_extract_dir, "speaker.txt")
    ))
  df |> 
    filter(
      F1 < mean(F1) + (4*sd(F1)),
      F1 > mean(F1) - (4*sd(F1)),
      F2 < mean(F2) + (4*sd(F2)),
      F2 > mean(F2) - (4*sd(F2))
    ) |>  
  mutate(
    ipa_vclass = str_remove(ipa_vclass, "[FT]")
  ) -> out
  
  return(out)
})

get_tracks <- reactive({
  df <- readr::read_tsv(
    fs::path_join(
      c(post_extract_dir, "speaker.tracks")
    )
  )
  return(df)
})

```

```{r}
#| context: server
#| label: results-vplot

vplot<- eventReactive(input$report,{
  req(
    fs::file_exists(
    fs::path_join(
      c(post_extract_dir, "speaker.txt")
    )
  ))['p']
  get_data() |> 
    ggplot(aes(F2, F1, label = ipa_vclass, color = ipa_vclass, text = word))+
      geom_text()+
      scale_x_reverse()+
      scale_y_reverse()+
      labs(color = "vowel")+
      theme_bw()-> p
  ply <- ggplotly(p, tooltip = "text") |> 
    layout(
      font = list(
      family = "Fira Sans"
      )
    )
  ply  
}
)            

output$vowel_plot <- renderPlotly({
  vplot()
})
```

```{r}
#| context: server
#| label: results-lowback

lowback <- eventReactive(input$report, {
    req(
    fs::file_exists(
    fs::path_join(
      c(post_extract_dir, "speaker.txt")
    )
  ))
  all_dat <-  get_data()
  lowback <- all_dat |>
    filter(plt_vclass %in% c("o", "oh"))
  
  
  
  lowback |> 
    ggplot(aes(F2, F1))+
      geom_text(aes(label = ipa_vclass, text = word, color = ipa_vclass), size = 5)+
      scale_x_reverse()+
      scale_y_reverse()+
      scale_color_discrete(limits = sort(unique(all_dat$ipa_vclass)))+
      labs(color = "vowel")+
      theme_bw() ->p
  ply <-ggplotly(p, tooltip = "text") |> 
      layout(
      font = list(
      family = "Fira Sans"
      )
    )
  return(ply)
})

output$lowback <- renderPlotly({
  lowback()
})

```

```{r}
#| context: server
#| label: results-short-a

shorta <- eventReactive(input$report, {
    req(
    fs::file_exists(
    fs::path_join(
      c(post_extract_dir, "speaker.txt")
    )
  ))
  all_dat <-  get_data()
  shorta <- all_dat |>
    filter(plt_vclass %in% c("ae")) |> 
    mutate(ipa_vclass  = case_when(
      fol_seg == "N" ~ "Ã¦n",
      fol_seg == "M" ~ "Ã¦m",
      fol_seg == "NG" ~ "Ã¦Å",
      .default = "Ã¦"
    ))
  
  
  
  shorta |> 
    ggplot(aes(F2, F1))+
      geom_text(aes(label = ipa_vclass, text = word, color = ipa_vclass), size = 5)+
      scale_x_reverse()+
      scale_y_reverse()+
      labs(color = "vowel")+
      theme_bw() ->p
  ply <-ggplotly(p, tooltip = "text") |> 
      layout(
      font = list(
      family = "Fira Sans"
      )
    )
  return(ply)
})

output$shorta<- renderPlotly({
  shorta()
})
```

```{r}
#| context: server
#| label: results-pinpen

pinpen <- eventReactive(input$report, {
  req(
    fs::file_exists(
    fs::path_join(
      c(post_extract_dir, "speaker.txt")
    )
  ))
  all_dat <-  get_data()
  pinpen <- all_dat |>
    filter(plt_vclass %in% c("i", "e")) |> 
    mutate(before = case_when(
      fol_seg %in% c("M", "N", "NG") ~ "/m, n, Å/",
      .default = "other"
    ) 
  )
  
  pinpen |> 
    ggplot(aes(F2, F1))+
      geom_text(aes(label = ipa_vclass, text = word, color = ipa_vclass), size = 5)+
      scale_x_reverse()+
      scale_y_reverse()+
      scale_color_discrete(limits = sort(unique(all_dat$ipa_vclass)))+
      labs(color = "vowel")+
      theme_bw()  +  
      facet_grid(.~before, label = label_both) ->p
      
  ply <-ggplotly(p, tooltip = "text") |>  
    layout(
      font = list(
      family = "Fira Sans"
      )
    )
  return(ply)
})

output$pinpen <- renderPlotly({
  pinpen()
})
```

```{r}
#| context: server
#| label: results-ayplot
ayplot<- eventReactive(input$report,{
  req(
    fs::file_exists(
    fs::path_join(
      c(post_extract_dir, "speaker.txt")
    )
  ))['p']
  
  req(
    fs::file_exists(
    fs::path_join(
      c(post_extract_dir, "speaker.tracks")
    )
  ))['p']
  
  newdat <- tibble(
    t_prop = seq(0,1, length = 100)
  )

  
  
  all_dat <- get_data() 
  all_dat |> 
    summarise(
      .by = c(ipa_vclass),
      F1 = mean(F1),
      F2 = mean(F2)
    ) |> 
    filter(
      ipa_vclass %in% c(
        "Éª",
        "É",
        "Ã¦",
        "É"
      )
    ) -> 
    point_vowels
  
    get_tracks() |> 
         filter(plt_vclass %in% c("ay", "ay0")) |> 
   mutate(
     .by = id,
     t_rel = t - min(t),
     t_prop = t_rel/max(t_rel)
   ) |> 
   group_by(plt_vclass, ipa_vclass) |> 
   tidyr::nest() |> 
   mutate(
     f1_models = purrr::map(
       data,
       \(df) gam(F1 ~ s(t_prop), data = df)
     ),
    f2_models = map(
       data,
       \(df) gam(F2 ~ s(t_prop), data = df)
     ),
    f1_dat = map(
      f1_models,
      \(mod) tibble(newdat, F1 = predict(mod, newdata = newdat))
    ),
    f2_dat = map(
      f2_models,
      \(mod) tibble(newdat, F2 = predict(mod, newdata = newdat))
    ),
    all_dat = map2(
      f1_dat, f2_dat, left_join
    )
   ) |> 
   select(plt_vclass, ipa_vclass, all_dat) |> 
   tidyr::unnest(all_dat) ->
   ay_tracks
    
  point_vowels |> 
    ggplot(aes(F2, F1, label = ipa_vclass, text = ipa_vclass))+
      geom_text()+
      geom_path(data = ay_tracks, 
                arrow = arrow(type = "closed"), 
                linewidth = 1,
                aes(color = ipa_vclass))+
      scale_color_discrete(limits = sort(unique(all_dat$ipa_vclass)))+    
      scale_x_reverse()+
      scale_y_reverse()+
      labs(color = "vowel")+
      theme_bw()-> p
    
  
  ply <- ggplotly(p, tooltip = "text") |> 
    layout(
      font = list(
      family = "Fira Sans"
      )
    )
  ply  
}
)            

output$ayplot <- renderPlotly({
  ayplot()
})
```

```{r}
#| context: server
#| label: results-awplot
awplot<- eventReactive(input$report,{
  req(
    fs::file_exists(
    fs::path_join(
      c(post_extract_dir, "speaker.txt")
    )
  ))['p']
  
  req(
    fs::file_exists(
    fs::path_join(
      c(post_extract_dir, "speaker.tracks")
    )
  ))['p']
  
  newdat <- tibble(
    t_prop = seq(0,1, length = 100)
  )

  
  
  all_dat <- get_data() 
  all_dat |> 
    summarise(
      .by = c(ipa_vclass),
      F1 = mean(F1),
      F2 = mean(F2)
    ) |> 
    filter(
      ipa_vclass %in% c(
        "Éª",
        "É",
        "Ã¦",
        "É"
      )
    ) -> 
    point_vowels
  
    get_tracks() |> 
         filter(plt_vclass %in% c("aw")) |> 
   mutate(
     .by = id,
     t_rel = t - min(t),
     t_prop = t_rel/max(t_rel)
   ) |> 
   group_by(plt_vclass, ipa_vclass) |> 
   tidyr::nest() |> 
   mutate(
     f1_models = purrr::map(
       data,
       \(df) gam(F1 ~ s(t_prop), data = df)
     ),
    f2_models = map(
       data,
       \(df) gam(F2 ~ s(t_prop), data = df)
     ),
    f1_dat = map(
      f1_models,
      \(mod) tibble(newdat, F1 = predict(mod, newdata = newdat))
    ),
    f2_dat = map(
      f2_models,
      \(mod) tibble(newdat, F2 = predict(mod, newdata = newdat))
    ),
    all_dat = map2(
      f1_dat, f2_dat, left_join
    )
   ) |> 
   select(plt_vclass, ipa_vclass, all_dat) |> 
   tidyr::unnest(all_dat) |> 
    mutate(
      text = glue::glue(
        "vowel: {ipa_vclass}\n time: {round(t_prop, digits = 2)}"
      )
    )->
   aw_tracks
    
  point_vowels |> 
    ggplot(aes(F2, F1, label = ipa_vclass, text = ipa_vclass))+
      geom_text()+
      geom_path(data = aw_tracks,
                arrow = arrow(type = "closed"),
                linewidth = 1,
                aes(color = ipa_vclass)
                )+
      scale_color_discrete(limits = sort(unique(all_dat$ipa_vclass)))+    
      scale_x_reverse()+
      scale_y_reverse()+
      labs(color = "vowel")+
      theme_bw()-> p
    
  
  ply <- ggplotly(p, tooltip = "text") |> 
    layout(
      font = list(
      family = "Fira Sans"
      )
    )
  ply  
}
)            

output$awplot <- renderPlotly({
  awplot()
})
```
